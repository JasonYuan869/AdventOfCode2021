use std::collections::HashSet;
use std::env;

#[cfg(test)]
mod tests {
    use crate::*;

    const INPUT_SIZE: usize = 12;
    static INPUT: [&str; INPUT_SIZE] = [
        "00100", "11110", "10110", "10111", "10101", "01111", "00111", "11100", "10000", "11001",
        "00010", "01010",
    ];

    #[test]
    fn test_part1() {
        assert_eq!(part1(&INPUT, INPUT_SIZE), 198);
    }

    #[test]
    fn test_part2() {
        assert_eq!(part2(&INPUT, INPUT_SIZE), 230);
    }
}

// Include INPUT array and INPUT_SIZE constant generated by build script
include!(concat!(env!("OUT_DIR"), "/input.rs"));

fn part1(input: &[&str], size: usize) -> u32 {
    let length = input[0].len();
    // Contains the number of ones in each position.
    let mut ones_count = vec![0_usize; length];
    let mut gamma = 0_u32;

    // Two for loops process the array by COLUMN
    for i in 0..length {
        for s in input {
            if let Some('1') = s.chars().nth(i) {
                ones_count[i] += 1;
            }
        }
        if 2 * ones_count[i] > size {
            gamma += 1 << (length - i - 1);
        }
    }
    let epsilon = !gamma & ((1 << length) - 1);
    gamma * epsilon
}

fn part2(input: &[&str], size: usize) -> u32 {
    let length = input[0].len();
    let mut input_set: HashSet<&str> = input.iter().cloned().collect();
    let mut o2 = 0_u32;
    let mut co2 = 0_u32;

    // O2
    for i in 0..length {
        let mut ones = 0_usize;
        for s in &input_set {
            if let Some('1') = s.chars().nth(i) {
                ones += 1;
            }
        }
        let most_common = if 2 * ones >= input_set.len() {
            '1'
        } else {
            '0'
        };
        input_set.retain(|&k| k.chars().nth(i).unwrap() != most_common);

        if input_set.len() == 1 {
            for (j, c) in input_set.iter().next().unwrap().chars().enumerate() {
                if c == '1' {
                    o2 += 1 << (length - j - 1);
                }
            }
            break;
        }
    }

    input_set = input.iter().cloned().collect();

    // CO2
    for i in 0..length {
        let mut ones = 0_usize;
        for s in &input_set {
            if let Some('1') = s.chars().nth(i) {
                ones += 1;
            }
        }
        let least_common = if 2 * ones < input_set.len() {
            '1'
        } else {
            '0'
        };
        input_set.retain(|&k| k.chars().nth(i).unwrap() != least_common);

        if input_set.len() == 1 {
            for (j, c) in input_set.iter().next().unwrap().chars().enumerate() {
                if c == '1' {
                    co2 += 1 << (length - j - 1);
                }
            }
            break;
        }
    }


    o2 * co2
}

fn main() {
    println!("Part 1: {}", part1(&INPUT, INPUT_SIZE));
    println!("Part 2: {}", part2(&INPUT, INPUT_SIZE));
}
